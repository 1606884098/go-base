package main

import "fmt"

/*
Go语言是静态类型语言，因此变量（variable）是有明确类型的，编译器也会检查变量类型的正确性。在数学概念中，变量表示没有固定值且可改变的数。但从
计算机系统实现角度来看，变量是一段或多段用来存储数据的内存。

静态语言和动态语言的区别：
静态语言：
变量的类型在编译之前就需要确定，在编译的时候需要先编译，将源码转换成目标代码，然后需要运行目标代码程序才能运行，比如go,C++、Java、Delphi、C#。
动态语言：
不需要直接指定变量类型，在解释的时候，转换为目标代码和运行程序一步到位，比如Python、Ruby、Perl.可以在运行时改变结构.
*/
func main() {
	/*
		1.定义变量
		1.1 标准格式：var name type
		var：是声明变量的关键字
		name：是变量名（标识符：有非数字开头，字母，数字，下划线组成,尽量见名知意）
		type：是变量的类型
		1.2 批量格式
			var(
				name_1 type
				name_2 type
			)
		var 形式的声明语句往往是用于需要显式指定变量类型地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。
		1.3 简短格式
		name:= express 或 name_1,name_2:= express_1,express_2
		需要注意的是，简短模式（short variable declaration）有以下限制：
		定义变量，同时显式初始化。
		不能提供数据类型。
		只能用在函数内部。
		简短变量声明被广泛用于大部分的局部变量的声明和初始化
	*/
	var a int //1.1

	var ( //1.2
		b string
		c []float32
		d func() bool
		e struct {
			f int
		}
	)

	g, h := 0, 1 //1.3
	//go语言中定义的变量一定要使用，定义不使用编译报错。当一个变量被声明之后，系统自动赋予它该类型的零值：
	// int 为 0，float 为 0.0，bool 为 false，string 为空字符串，指针为 nil 等。所有的内存在 Go 中都是经过初始化的
	fmt.Print(a, b, c, d, e, g, h)
	/*
		2.变量初始化
		2.1变量初始化的标准格式
		var name type = express
		2.2编译器推导类型的格式
		var name=express
		编译器会尝试根据等号右边的表达式推导 hp 变量的类型,等号右边的部分在编译原理里被称做右值（rvalue）。
		2.3短变量声明并初始化
		name_1,name_2:=express_1,express_2
	*/
	var i int = 10    //2.1 或 var i int   i=10
	var j = "str"     //2.2
	k, l := 10, "str" //2.3
	fmt.Print(i, j, k, l)
	/*
		3.左值与右值：等号右边的部分在编译原理里被称做右值（rvalue），左值就是可以改变的值
	*/
	var hp = 100 //3 hp是左值，可以改变的值
	//100=129//不能改变，只能赋值给左值的值
	fmt.Print(hp)
	/*
		4.变量赋值
		变量可以重复赋值,一旦给一个变量赋了新值,那么变量中的老值就不复存在了
		一个变量赋值是从右边往左边；多重赋值时，变量的左值和右值按从左到右的顺序赋值。

		= 和:=的区别：
		=是给已有的变量赋值,已经分配好了内存空间
		:=分配内存空间并且赋值，自动推导类型赋值

		自动推导类型:就是不用通过var 声明变量，不用指定类型，直接在变量名后面跟”:”号，同时完成赋值。那么GO会根据所赋的值自动
		推导出变量的类型。
	*/
	//多重赋值交换变量值
	var m int = 100
	var n int = 200
	n, m = m, n

	/*为了节省内存也可以这么玩
	m=m^n
	n=n^m
	m=m^n
	*/
	fmt.Println(m, n)
}
