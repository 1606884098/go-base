package main

func main() {
	/*
	      算术运算符:
	   	优先级：先乘除,后加减,有括号先算括号里的,相同级别的从左至右运算
	*/
	var a int = +1
	var b int = -1
	var add int = a + b
	var subtract int = a - b
	var multiply int = a * b
	var divide int = a / b
	var modulus int = a % b
	a++ //++，--只能写后面
	a--
	var con string = "ab" + "ab"
	print(a, b, add, subtract, multiply, divide, modulus, a, b, con)
	/*
		强制类型转换的语法格式：
		数据类型名(待转换的值)
		Go语言中不允许隐式转换，所有类型转换必须显式声明（强制转换），而且转换只能发生在
		两种相互兼容的类型之间
		int 转float强制转换多小数,float转int强制转换,丢精度.
	*/
	var c int = 17
	var d int = 18
	sum := (c + d) / 3
	print(float32(sum))
	/*
		赋值运算符的分类
		运算符	描述	          实例
		=	   简单的赋值运算符，将一个表达式的值赋给一个左值	C=A+B 将 A+B 表达式结果赋值给 C
		+= 	   相加后再赋值	    C+=A 等于 C=C+A
		-=	   相减后再赋值	    C-=A 等于 C=C-A
		*=	   相乘后再赋值	    C*=A 等于 C=C*A
		/=	   相除后再赋值	    C/=A 等于 C=C/A
		%=	   求余后再赋值  	C%=A 等于 C=C%A
		<<=	   左移后赋值	    C<<=2 等于 C=C<<2
		>>=	   右移后赋值	    C>>=2 等于 C=C>>2
		&=	   按位与后赋值  	C&=2 等于 C=C&2
		^=	   按位异或后赋值	C^=2 等于 C=C^2
		|=	   按位或后赋值	    C|=2 等于 C=C|2
	*/

	/*
		运算符	                描述	                                 实例
		==	  检查两个值是否相等，如果相等返回 True 否则返回 False	    (A == B) 为 False
		!=	  检查两个值是否不相等，如果不相等返回 True否则返回 False	(A != B) 为 True
		>	  检查左边值是否大于右边值，如果是返回 True否则返回 False 	(A > B) 为 False
		<	  检查左边值是否小于右边值，如果是返回 True 否则返回 False	(A < B) 为 True
		>=	  检查左边值是否大于等于右边值，如果是返回 True 否则返回 False (A >= B) 为 False
		<=	  检查左边值是否小于等于右边值，如果是返回 True否则返回 False  (A <= B) 为 True

		1) 关系运算符的结果都是 bool 型，也就是要么是 true，要么是 false。
		2) 关系运算符组成的表达式，我们称为关系表达式： a > b
		3) 比较运算符"=="不能误写成 "=" !!
	*/

	/*
		逻辑运算符:
		运算符	术语	示例	结果
		!	    非	    !a	  如果a为假，则!a为真；
		                      如果a为真，则!a为假。
		&&	    与	  a && b  如果a和b都为真，则结果为真，否则为假。
		||	    或	  a || b  如果a和b有一个为真，则结果为真，二者都为假时，结果为假。

		逻辑表达式的结果同样也是bool类型,逻辑运算符两边放的一般都是关系表达式或者bool类
		型的值。
	*/

	/*
		Go语言位运算符
		位运算符是对整数在内存中的二进制位进行操作。
		位运算符比一般的算术运算符速度要快，而且可以实现一些算术运算符不能实现的功能。如果
		要开发高效率程序，位运算符是必不可少的。

		运算符	                                 描述	                                                                                                    实例
		&	   按位与运算符"&"是双目运算符。其功能是参与运算的两数各对应的二进制位相与	                                                          (A&B) 结果为 12，二进制为 0000 1100
		|	   按位或运算符“|”是双目运算符。其功能是参与运算的两数各对应的二进制位相或	                                                          (A|B) 结果为 61，二进制为 0011 1101
		^	   按位异或运算符“^”是双目运算符。其功能是参与运算的两数各对应的二进制位相异或，当两对应的二进制位相异时，结果为 1	                      (A^B) 结果为 49，二进制为 0011 0001
		<<	   左移运算符“<<”是双目运算符。左移 n 位就是乘以 2 的 n 次方。其功能是把“<<”左边的运算数的各二进制位全部左移若干位，由“<<”右边的数指定移动的位数，高位舍弃，低位补 0	   (A<<2) 结果为 240，二进制 1111 0000
		>>	   右移运算符“>>”是双目运算符。右移 n 位就是除以 2 的 n 次方。其功能是把“>>”左边的运算数的各二进制位全部右移若干位，“>>”右边的数指定移动的位数	                       (A>>2) 结果为 15，二进制为 0000 1111

	*/

	/*
		运算符	描述	        实例
		&	   返回变量存储地址	&a 将给出变量的实际地址
		*	   指针变量	        *a 是一个指针变量
	*/

	/*
		优先级：高到低
		后缀   (),[],->,++,--
		单目   +,-,!,~,(type),*,&,sizeof（右到左）
		乘法   *,/,%
		加法   +，-
		移位   <<,>>
		关系   <,<=,>,>=
		相等   ==,!=
		按位and  &
		按位xor  ^
		按位or   |
		逻辑and  &&
		逻辑or   ||
		赋值运算  =,+=,-=,*=,/=,%=,>>=,<<=,&=,^=,|=(右到左)
		逗号     ,
	*/
}
